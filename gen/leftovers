

killSlv (Ass x _ _) = S.singleton x
killSlv _           = S.empty

genSlv (Ass x a l) r       | x `S.member` (slvExit' l r) = freeVariables a 
                           | otherwise       = S.empty
-- genSlv (MultAss asgs _) r  = S.unions [freeVariables a | (_,a)<- lastToAss asgs]
--               where lastToAss = foldr (\(x,a) acc -> if x `elem` (fst acc) then acc else ((x,a):acc)) []
genSlv x           r = freeVariables x






--}



type L               = S.Set Variable






prog :: StmtM
prog = begin
       ["r" =: AVal 1,
        "a" =: Var "r" *! Var "r",
        while (Var "y" >! AVal 1) [ 
               "r" =: Var "r" *! Var "x",
               "y" =: Var "y" -! AVal 1
               ],
        skip
       ]


-- TESTING
p = labelProgram prog
i = (x, x) where x = M.fromAscList $ map (\l -> (l, iterationStart p l)) (labels p)
step = f (equations p)
test r = do let l = labels p
            mapM_ (\lbl -> putStrLn $ (show lbl ++ ": " ++ (unwords $ S.toList $ slvEntry' lbl r) ++ " | " ++ (unwords $ S.toList $ slvExit' lbl r))) l



iterationStart :: Program -> Label -> L
iterationStart p l | l `elem` final p = S.singleton "a"
                   | otherwise        = S.empty

